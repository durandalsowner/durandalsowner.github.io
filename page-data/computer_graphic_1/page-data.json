{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/computer_graphic_1","result":{"data":{"post":{"__typename":"MdxPost","slug":"/computer_graphic_1","title":"Shaded Chopper","date":"08.10.2020","tags":[{"name":"CG","slug":"cg"},{"name":"C++","slug":"c"},{"name":"OpenGL","slug":"open-gl"}],"description":"Demo","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Shaded Chopper\",\n  \"date\": \"2020-10-08T00:00:00.000Z\",\n  \"description\": \"Demo\",\n  \"tags\": [\"CG\", \"C++\", \"OpenGL\"],\n  \"slug\": \"/computer_graphic_1\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Source Code\"), mdx(\"p\", null, \"github repo: \", mdx(\"a\", {\n    href: \"https://github.com/rolandshc/shadedChopper\"\n  }, \"shadedChopper \")), mdx(\"h3\", null, \"Shaded Chopper\"), mdx(\"br\", null), mdx(\"p\", null, \"React Live is used here to show a responsive iframe of the embeded video.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"react-live\",\n    \"react-live\": true\n  }), \"\\nconst wrapper  = {\\n  position: 'relative',\\n  overflow: 'hidden',\\n  width: '100%',\\n  padding: '25% 0%',\\n};\\n\\nconst responsive = {\\n  position: 'absolute',\\n  top: 0,\\n  left: 0,\\n  bottom: 0,\\n  right: 0,\\n  width: '100%',\\n  height: '100%',\\n};\\n\\nrender(\\n<div style={wrapper}>\\n<iframe style={responsive} src=\\\"https://www.youtube.com/embed/Qavs0x_usBU\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen>\\n</iframe>\\n</div>\\n);\\n\")), mdx(\"p\", null, \"Description:\"), mdx(\"p\", null, \"It is a course practice. In the video, the scene has been rendered with walls and a flying chopper with blades rotating.\"), mdx(\"p\", null, \"I have made use of the C++ OpenGL Mathematics (glm) to create those objects as array buffers.\"), mdx(\"p\", null, \"And their position information will pass from CPU to GPU to let the GPU calculate camera space vertices, fragments and colors.\"), mdx(\"p\", null, \"We use the OpenGL Shading Language (GLSL) for the vertex shader and fragment shader to calculate the resulting colors.\"), mdx(\"p\", null, \"As you see, a lightsource is rotating around the scene.\"), mdx(\"p\", null, \"I have implemented the Phong reflection model so the GPU will run and calculate the color changes simultaneously when running the program.\"), mdx(\"p\", null, \"The lighting model takes care of the Ambient, Diffuse, and Specular Lighting.\"), mdx(\"p\", null, \"If you want to know more about the light and shadow, please check the links below =)\"), mdx(\"p\", null, \"Recommended reading:\"), mdx(\"a\", {\n    href: \"https://learnopengl.com/Lighting/Basic-Lighting\"\n  }, \"Learn opengl - Basic Lighting\"), \" \", mdx(\"br\", null), mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Phong_reflection_model\"\n  }, \"Phong reflection model\"), mdx(\"p\", null, \"Last edited: 08/10/2020\"), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Source Code github repo:  shadedChopper  Shaded Chopper React Live is used here to show a responsive iframe of the embeded videoâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/computer_graphic_1","formatString":"DD.MM.YYYY"}}}